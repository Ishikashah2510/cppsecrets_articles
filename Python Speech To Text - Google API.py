# -*- coding: utf-8 -*-
"""
Created on Thu Jun  3 20:33:37 2021

@author: Ishika
"""

"""
Speech recognition is a relatively new form of technology that utilizes a computer machine to map a voice signal to a text by means of identification. Speech recognition achieved its existence first in the nineteen fifties, when the researchers at the AT&T Bell Laboratory established a way to extract information regarding the change of vowel formant frequency present in the voice, which led to the world's first system that could differentiate a small number of digital pronunciations. During the period of nineteen seventies, the concept of pitch and cepstrum were applied to speech recognition procedures. Speech recognition gained more efficiency when HMM was discovered in the nineteen eighties. The speech recognition systems that are available currently, are not only confided in laboratories, but have found its applications in various fields. This has led to the need of achievement of speech enhancement as well as denoising algorithms. The output generated by these systems are further used to attain the information stored in it. Such a system can be trained to work for either one language or many languages simultaneously.

In this article we will see how to use google's speech recognition's API. I will also be showing the variations that can be used for different languages, and different accents.
"""


import speech_recognition as sr


def recognize_audio(r, device_id, sample_rate, chunk_size):
    with sr.Microphone(device_index=device_id, sample_rate=sample_rate,
                       chunk_size=chunk_size) as source:
        r.adjust_for_ambient_noise(source)
        print("Start speaking please")
        audio = r.listen(source)
        try:
            text = r.recognize_google(audio)
            return text
    
        except sr.UnknownValueError:
            return "Google Speech Recognition could not understand audio"
    
        except sr.RequestError as e:
            return "Could not request results from Google SpeechRecognitionservice;{0}".format(e)


def record():
    r = sr.Recognizer()
    mic_name = "USB Device 0x46d:0x825: Audio (hw:1, 0)"
    sample_rate = 48000
    
    chunk_size = 2048
    mic_list = sr.Microphone.list_microphone_names()
    device_id = 0
    for i, microphone_name in enumerate(mic_list):
        if microphone_name == mic_name:
            device_id = i
    
    out = recognize_audio(r, device_id, sample_rate, chunk_size)
    return out


if __name__ == "__main__":
    while True:
        recognized_text = record()
        print("The audio converted to text is : ", end="")
        print("\u001b[36;1m" + str(recognized_text) + "\033[0m")
        
        choice = input("Would you like to test for another audio? Enter Y/y for yes : ")
        if choice.lower() != 'y':
            print("Okay, thank you!")
            break


"""
Using different languages:
    Google Speech API supports over 78 languages. The list of which can be found here : https://stackoverflow.com/questions/14257598/what-are-language-codes-in-chromes-implementation-of-the-html5-speech-recogniti/14302134#14302134 
    The languages has been associated with codes to classify for all languages. It is defaulted to 'en' - English

Google Speech API has an option of showing the raw output as a parameter, namely, show_all. It is defaulted to False. If set to True, the output will be returned as a json dictionary.

The key parameter is defaulted to None. You can download your specific API key from here : http://www.chromium.org/developers/how-tos/api-keys It is suggested to use API keys for testing only.
"""

"""
Explanation of functions:
    recognize_audio: This function is called from *record* function. In this function, we use with operator to make sure we use microphone for the set time of speaking. We use adjust_for_ambient_noise to make sure that we adjust based on the background noise. We then start to listen to the user, after which we try to recognize the audio. If the API fails to understand the audio, we have used exception handling for it. 
    
    record: This function initializes the mic alongwith the sample rate and chunk size. We then call for the recognize_audio function.
    
    main: We call the record function until the user decides to stop.
"""

"""
Next steps: This can be improved and made with different languages along with GUI using Flask, Django etc. 
"""